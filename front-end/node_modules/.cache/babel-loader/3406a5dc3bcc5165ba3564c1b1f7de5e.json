{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Desktop\\\\EOS Project\\\\front-end\\\\src\\\\View\\\\ContributePage\\\\FileUpload.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { fileUploadStyle } from './FileUpload.style';\nimport Dropzone from 'react-dropzone';\nimport { CloudUploadOutlined } from \"@ant-design/icons\";\nimport Axios from 'axios';\nimport { Grid } from '@material-ui/core';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction FileUpload(props) {\n  _s();\n\n  const classes = fileUploadStyle();\n  const [Images, setImages] = useState([]);\n\n  const onDrop = files => {\n    let formData = new FormData();\n    const config = {\n      header: {\n        'content-type': 'multipart/form-data'\n      }\n    };\n\n    for (var i = 0; i < files.length; i++) {\n      formData.append(\"files\", files[i]);\n    } //save the Image we chose inside the Node Server \n\n\n    Axios.post('/upload/uploadImage', formData, config).then(response => {\n      if (response.data.success) {\n        console.log(response.data.image);\n        setImages(Images.concat(response.data.image));\n        props.refreshFunction(Images.concat(response.data.image));\n      } else {\n        console.log(\"failed\");\n        alert('Failed to save the Image in Server');\n      }\n    });\n  };\n\n  const onDelete = image => {\n    const currentIndex = Images.indexOf(image);\n    let newImages = [...Images];\n    newImages.splice(currentIndex, 1);\n    setImages(newImages);\n    props.refreshFunction(newImages);\n  };\n\n  const uploadFIle = name => {};\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Grid, {\n      xs: 4,\n      className: classes.upload,\n      children: /*#__PURE__*/_jsxDEV(Dropzone, {\n        onDrop: onDrop,\n        multiple: true,\n        maxSize: 99999999999999999999999999999999,\n        children: ({\n          getRootProps,\n          getInputProps\n        }) => /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: 'block',\n            alignItems: 'center',\n            justifyContent: 'center'\n          },\n          ...getRootProps(),\n          children: [/*#__PURE__*/_jsxDEV(\"input\", { ...getInputProps()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(CloudUploadOutlined, {\n            style: {\n              color: \"#6990F2\",\n              fontSize: \"100px\",\n              marginLeft: \"50px\"\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            style: {\n              color: \"#6990F2\",\n              fontSize: \"20px\"\n            },\n            children: \"Browse or Drag and Drop files to Upload\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 63,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      xs: 9\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 9\n  }, this);\n}\n\n_s(FileUpload, \"ctGZwJnr/Sg6IjjGKBcfFzkSfBA=\");\n\n_c = FileUpload;\nexport default FileUpload;\n{\n  /* <div style={{ display: 'flex', width: '350px', height: '240px', overflowX: 'scroll' }}>\n      {Images.map((image, index) => (\n         <div onClick={() => onDelete(image)}>\n     <img style={{ minWidth: '300px', width: '300px', height: '240px' }} src={`${image}`} alt={`Img-${index}`} />}*/\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"FileUpload\");","map":{"version":3,"sources":["C:/Users/User/Desktop/EOS Project/front-end/src/View/ContributePage/FileUpload.js"],"names":["React","useState","fileUploadStyle","Dropzone","CloudUploadOutlined","Axios","Grid","FileUpload","props","classes","Images","setImages","onDrop","files","formData","FormData","config","header","i","length","append","post","then","response","data","success","console","log","image","concat","refreshFunction","alert","onDelete","currentIndex","indexOf","newImages","splice","uploadFIle","name","upload","getRootProps","getInputProps","display","alignItems","justifyContent","color","fontSize","marginLeft"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\nimport { fileUploadStyle } from './FileUpload.style';\nimport Dropzone from 'react-dropzone';\nimport {CloudUploadOutlined} from \"@ant-design/icons\"\nimport Axios from 'axios';\nimport { Grid } from '@material-ui/core';\nfunction FileUpload(props) {\n    const classes = fileUploadStyle();\n    const [Images, setImages] = useState([])\n\n    const onDrop = (files) => {\n        let formData = new FormData();\n        const config = {\n            header: { 'content-type': 'multipart/form-data' }\n        }\n        for(var i=0;i<files.length;i++){\n            formData.append(\"files\",files[i])\n        }\n        //save the Image we chose inside the Node Server \n        Axios.post('/upload/uploadImage', formData, config)\n            .then(response => {\n                if (response.data.success) {\n                    console.log(response.data.image)\n                    setImages(Images.concat(response.data.image))\n                    props.refreshFunction(Images.concat(response.data.image))\n                } else {\n                    console.log(\"failed\")\n                    alert('Failed to save the Image in Server')\n                }\n            })\n    }\n\n\n    const onDelete = (image) => {\n        const currentIndex = Images.indexOf(image);\n        \n        let newImages = [...Images]\n        newImages.splice(currentIndex, 1)\n\n        setImages(newImages)\n        props.refreshFunction(newImages)\n    }\n    const uploadFIle = (name)=>{\n\n    }\n\n    return (\n        <div>\n            <Grid xs={4} className={classes.upload}>\n            <Dropzone\n                onDrop={onDrop}\n                multiple={true}\n                maxSize={99999999999999999999999999999999}\n            >\n                {({ getRootProps, getInputProps }) => (\n                    <div style={{\n                        display: 'block', alignItems: 'center', justifyContent: 'center'\n                    }}\n                        {...getRootProps()}\n                    >\n                        <input {...getInputProps()} />\n                        <CloudUploadOutlined style={{color: \"#6990F2\",fontSize:\"100px\",marginLeft:\"50px\"}}/>\n                        <p style={{color: \"#6990F2\",fontSize:\"20px\"}}>Browse or Drag and Drop files to Upload</p>\n                    </div>\n                )}\n            </Dropzone>\n            </Grid>\n            <Grid xs={9}>\n\n            </Grid>\n            {/* <Grid xs={9}>\n                <section className={classes.progressArea}>\n                    <li className=\"row\">\n                        <i className=\"fas fa-file-alt\"></i>\n                        <div class=\"content\">\n                            <div class=\"details\">\n                                <span class=\"name\">${name} • Uploading</span>\n                                <span class=\"percent\">${fileLoaded}%</span>\n                            </div>\n                            <div class=\"progress-bar\">\n                                <div class=\"progress\" style=\"width: ${fileLoaded}%\"></div>\n                            </div>\n                        </div>\n                    </li>\n                </section>\n                <section className={classes.uploadedArea}></section>\n            </Grid> */}\n\n        </div>\n    )\n}\n\nexport default FileUpload\n            {/* <div style={{ display: 'flex', width: '350px', height: '240px', overflowX: 'scroll' }}>\n\n                {Images.map((image, index) => (\n                    <div onClick={() => onDelete(image)}>\n                <img style={{ minWidth: '300px', width: '300px', height: '240px' }} src={`${image}`} alt={`Img-${index}`} />}*/}\n"]},"metadata":{},"sourceType":"module"}