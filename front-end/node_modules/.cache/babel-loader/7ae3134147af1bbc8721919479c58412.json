{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Desktop\\\\EOS Project\\\\front-end\\\\src\\\\View\\\\ContributePage\\\\FileUpload.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport Dropzone from 'react-dropzone';\nimport { FileAddOutlined } from \"@ant-design/icons\";\nimport Axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction FileUpload(props) {\n  _s();\n\n  const [Images, setImages] = useState([]);\n\n  const onDrop = files => {\n    let formData = new FormData();\n    const config = {\n      header: {\n        'content-type': 'multipart/form-data'\n      }\n    };\n\n    for (var i = 0; i < files.length; i++) {\n      formData.append(\"files\", files[i]);\n    } //save the Image we chose inside the Node Server \n\n\n    Axios.post('/upload/uploadImage', formData, config).then(response => {\n      if (response.data.success) {\n        console.log(response.data.image);\n        setImages(Images.concat(response.data.image));\n        props.refreshFunction(Images.concat(response.data.image));\n      } else {\n        console.log(\"failed\");\n        alert('Failed to save the Image in Server');\n      }\n    });\n  };\n\n  const onDelete = image => {\n    const currentIndex = Images.indexOf(image);\n    let newImages = [...Images];\n    newImages.splice(currentIndex, 1);\n    setImages(newImages);\n    props.refreshFunction(newImages);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      display: 'flex',\n      justifyContent: 'space-between'\n    },\n    children: [/*#__PURE__*/_jsxDEV(Dropzone, {\n      onDrop: onDrop,\n      multiple: true,\n      maxSize: 99999999999999999999999999999999,\n      children: ({\n        getRootProps,\n        getInputProps\n      }) => /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          width: '300px',\n          height: '240px',\n          border: '1px solid lightgray',\n          display: 'flex',\n          alignItems: 'center',\n          justifyContent: 'center'\n        },\n        ...getRootProps(),\n        children: [/*#__PURE__*/_jsxDEV(\"input\", { ...getInputProps()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(FileAddOutlined, {\n          style: {\n            fontSize: \"100px\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: 'flex',\n        width: '350px',\n        height: '240px',\n        overflowX: 'scroll'\n      },\n      children: Images.map((image, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        onClick: () => onDelete(image),\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          style: {\n            minWidth: '300px',\n            width: '300px',\n            height: '240px'\n          },\n          src: `${image}`,\n          alt: `Img-${index}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 9\n  }, this);\n}\n\n_s(FileUpload, \"ctGZwJnr/Sg6IjjGKBcfFzkSfBA=\");\n\n_c = FileUpload;\nexport default FileUpload;\n\nvar _c;\n\n$RefreshReg$(_c, \"FileUpload\");","map":{"version":3,"sources":["C:/Users/User/Desktop/EOS Project/front-end/src/View/ContributePage/FileUpload.js"],"names":["React","useState","Dropzone","FileAddOutlined","Axios","FileUpload","props","Images","setImages","onDrop","files","formData","FormData","config","header","i","length","append","post","then","response","data","success","console","log","image","concat","refreshFunction","alert","onDelete","currentIndex","indexOf","newImages","splice","display","justifyContent","getRootProps","getInputProps","width","height","border","alignItems","fontSize","overflowX","map","index","minWidth"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\nimport Dropzone from 'react-dropzone';\nimport {FileAddOutlined} from \"@ant-design/icons\"\nimport Axios from 'axios';\nfunction FileUpload(props) {\n    const [Images, setImages] = useState([])\n\n    const onDrop = (files) => {\n        let formData = new FormData();\n        const config = {\n            header: { 'content-type': 'multipart/form-data' }\n        }\n        for(var i=0;i<files.length;i++){\n            formData.append(\"files\",files[i])\n        }\n        //save the Image we chose inside the Node Server \n        Axios.post('/upload/uploadImage', formData, config)\n            .then(response => {\n                if (response.data.success) {\n                    console.log(response.data.image)\n                    setImages(Images.concat(response.data.image))\n                    props.refreshFunction(Images.concat(response.data.image))\n                } else {\n                    console.log(\"failed\")\n                    alert('Failed to save the Image in Server')\n                }\n            })\n    }\n\n\n    const onDelete = (image) => {\n        const currentIndex = Images.indexOf(image);\n        \n        let newImages = [...Images]\n        newImages.splice(currentIndex, 1)\n\n        setImages(newImages)\n        props.refreshFunction(newImages)\n    }\n\n    return (\n        <div style={{ display: 'flex', justifyContent: 'space-between' }}>\n            <Dropzone\n                onDrop={onDrop}\n                multiple={true}\n                maxSize={99999999999999999999999999999999}\n            >\n                {({ getRootProps, getInputProps }) => (\n                    <div style={{\n                        width: '300px', height: '240px', border: '1px solid lightgray',\n                        display: 'flex', alignItems: 'center', justifyContent: 'center'\n                    }}\n                        {...getRootProps()}\n                    >\n                        <input {...getInputProps()} />\n                        <FileAddOutlined style={{fontSize:\"100px\"}} />\n\n                    </div>\n                )}\n            </Dropzone>\n\n            <div style={{ display: 'flex', width: '350px', height: '240px', overflowX: 'scroll' }}>\n\n                {Images.map((image, index) => (\n                    <div onClick={() => onDelete(image)}>\n                        <img style={{ minWidth: '300px', width: '300px', height: '240px' }} src={`${image}`} alt={`Img-${index}`} />\n                    </div>\n                ))}\n\n\n            </div>\n\n        </div>\n    )\n}\n\nexport default FileUpload"]},"metadata":{},"sourceType":"module"}